CONTROL STRUCTURES
STARTED 07/19/2021
COMPLETED 07/19/2021
--------------------------------------------
Booleans
Two Boolean values: true and false
nil: the absence of a value
If other objects are evaluated as Booleans, they are assigned either "truthy" or "falsey"
ONLY nil AND false ARE "falsey"; ALL OTHER VALUES ARE "truthy"
--------------------------------------------
Comparison Operators
a == b  [==] comparison operator: returns true if a and b are equal, false otherwise
a != b  [!=] not equal operator: returns true if a and b are not equal, false otherwise
a > b   [>] greater than operator: returns true if a is greater than b, false otherwise
a < b   [<] less than operator: returns true if a is less than b, false otherwise
a >= b  [>=] greater than or equal to: returns true if a is equal or greater than b, false otherwise
a <= b  [<=] less than or equal to: returns true if a is equal or less than b, false otherwise
--------------------------------------------
if Statements
In the below syntax, if the conditional is true, then the code runs. Otherwise, the code does not run.
if conditional
    code
end
It is possible to nest if statements. However, if one if statement is unfulfilled, the code block within that statement is not executed. Each if statement needs its own corresponding end line.
--------------------------------------------
else/elsif/unless Statements
else can be added to the end of an if statement. If the condition fails to run, then the else block is evaluated.
age = 20
if age >= 18
    puts "You can legally vote"
else
    puts "You are not old enough to vote"
end

elsif is short for "else if." This can help test for multiple conditions.
age = 20
if age >= 21
    puts "You can vote and drink alcohol."
elsif age >= 18
    puts "You can only vote."
else
    puts "You are too young to vote or drink alcohol."
end

unless is the opposite of an if statement. If the condition fails, then the code runs.
age = 20
unless age < 18
    puts "You can legally vote"
end
elsif and else can also be used with unless statements.
--------------------------------------------
Logical Operators
Can test for more complex conditions
&& AND  true if both are true, false otherwise
|| OR   true if at least one is true, false otherwise
!  NOT  reverses true and false; NOT true is false, and NOT false is true
--------------------------------------------
case Statements

case Statements test for values in the when statements. Multiple when statements can be tested simutaneously with commas.

An else statement can be added, which executes if no when statement is fulfilled.

a = 2
case a
when 1,3,5,7,9
    puts "Odd"
when 2,4,6,8
    puts "Even"
else
    puts "This is a big number"
end
--------------------------------------------
while and until Loops

Loops execute blocks repeatedly.
A while loop will run as long as the condition is true. If the condition never becomes false, the program is in an infinite loop.

while condition
    execute this code
end

An until loop is the opposite of a while loop. It will run as long as the condition is false. If the condition never becomes true, the program is in an infinite loop.

until condition
    execute this code
end
--------------------------------------------
Ranges
A sequence of numbers or letters. Ruby has two forms of ranges:
a..b is the inclusive range from a to b
a...b is the range from a to b, where b is not included.

.to_a method converts a range to an array.

Ranges can be useful for when case values and for loops.
--------------------------------------------
for Loops
Useful for looping over a set number of values or a range. It consists of an empty variable and a range. During each loop, the variable will assigned the corresponding value of the range.

for var in range
    code
end

break : stops the for loop from executing

for i in 1..5
    break if i > 3
    print i
end #prints 123

next : skips one iteration of the loop

for i in 1..5
    next if i%2 = 0
    print i
end #prints 135

redo : repeats the current iteration of the loop
retry : start the entire loop again from the beginning

loop do : allows code to execute until a break (if there is no break, it is an infinite loop)

x = 0
loop do
	puts x
	x += 1
	break if x > 10
end


